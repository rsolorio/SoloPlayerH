@import "../../../../styles-variables";

.sp-star-rating {
  display: flex;
  align-items: center;
  justify-content: center;
}

.sp-stars {
  display: flex;
  position: relative;
}

.sp-front-star {
  display: flex;
  overflow: hidden;
  position: absolute;
  top: 0;
}

// Style for the selector container
.sp-rating-selector {
  position: absolute;
  z-index: 1;
  top: -120%;
  left: 50%;
  width: 6.55em;
  padding: 0.4em;
  box-shadow: 0 2px 5px $sp-dim-black-high;
  opacity: 1;
  transform-origin: 50%;
  transform: translateX(-50%) scale(1);
  transition: all 300ms cubic-bezier(.07,.77,.46,1.47);
  list-style: none;
  border-radius: 10px;
}

// Animation for the selector container
.sp-rating-selector.sp-rating-animate {
  opacity: 0;
  transform: translateX(-50%) scale(0);
}

// Values are aligned to the right, which means the first value will be to the right
// and the last value to the left. The first item of the list is the max value
.sp-rating-selector li {
  float: right;
  width: 1.15em;
}

// Animation for each star
.sp-rating-selector i {
  transition: all 100ms cubic-bezier(0.07,0.77,0.46,1.47);
}

// There are three cases here:
// 1. Set the color on any hovered (the user places the mouse over) star
// 2. Set the color on any selected (the item value is less or equals than the control value) star
// 3. Set the color on any sibling star located after a hovered star
// 3a. This is tricky because visually, unselected stars are located after the hovered star,
// however, in the DOM, it is the other way around, selected stars are located after the hovered star
// .sp-rating-selector li:hover,
// .sp-rating-selector li.sp-rating-selected,
// .sp-rating-selector li:hover ~ li {
//   color: var(--color-on)
// }

.sp-rating-selector li:hover i,
.sp-rating-selector li:hover ~ li i {
  transform: scale(1.1);
}

.sp-rating-selector li:active i,
.sp-rating-selector li:active ~ li i {
  transform: scale(0.9)
}